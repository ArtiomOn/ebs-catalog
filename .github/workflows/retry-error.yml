uses: nick-fields/retry@v2

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - development


jobs:
  flake8-lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          exclude: "migrations"
          max-line-length: "120"
  test:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      # Load variables from github env to .env
      #----------------------------------------------
      - name: Write .env
        uses: CallePuzzle/envvar-to-dotenv-action@0.1.0
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        with:
          variableNames: SECRET_KEY,DEBUG,NAME,USER,PASSWORD,HOST,PORT
          envPath: '.env'
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          coverage run --source='apps.products.views'
          coverage report --fail-under=100      - 

with:
  timeout_seconds: 15
  max_attempts: 1
  retry_on: error
  command: >-
    coverage run --source='apps.products.views,apps.users.views'
    coverage report --fail-under=100
    flake8 --max-line-length 120 --exclude .venv,venv,migrations,__init__.py,.tox